This goal of these changes was (a) add a Java method and a JNI bridge so
that problems with the metastore and/or checkpoint files could be fixed;
(b) add diagnostics so that the actual cause could be found. This
file documents the changes.

1. Revision was bumped to 2.1.0

2. Function int jlog_ctx_repair(int aggressive) added to jlog.c
   In non-aggressive mode this function examines the metastore file
   and tries to fix it. It then examines the checkpoint file and
   tries to fix that. If both succeed then the function returns 1.
   If one or both fail, and aggressive mode is set, then the
   function attempts to delete all files in the jlog PATH directory
   (except the fassert files, see below), and then removes the
   directory itself.

   The function returns 1 on success and 0 on failure.

3. A JNI bridge was built with a java function with signature

   public native int repair(int aggressive);

4. A macro FASSERT() was created to log assertion failures throughout
   the jlog.c code in an effort to track down the pesky misbehaviors
   that sometimes occur. Unlike assert(), FASSERT() does not crash
   the process. It logs assertion failures to stderr.

5. Various small changes were made to configure.in and jlog_config.in
   to detect the presence of a few other include files.

6. A few trivial compiler warnings were addressed.

7. This file, V210_CHANGES, was created.

8. Tests were added to jtest.c

9. Some bug fixes were made as they were observed in the code. These bug
   fixes are:

   a. #include <sys/param.h> should be bracketed with #if HAVE_SYS_PARAM_H.
   b. javah is now run in the java-bits build to create the bridge .h file
   c. a trivial makefile was created in the python directory to eliminate
        errors from "make clean" and "gmake clean"
   d. two additional directories were added to the search for jni.h
